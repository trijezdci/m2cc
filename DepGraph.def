(*!m2r10*) (* Copyright (c) 2016 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE DepGraph;

(* Dependency Graph for Modula-2 R10 Core Compiler *)

IMPORT Source;
IMPORT Lexeme;


(* Dependency Graph Type *)

TYPE DepGraph = OPAQUE;


(* Iterator Procedure Type *)

TYPE IteratorBody = PROCEDURE ( Lexeme );


(* Operations *)

PROCEDURE New ( VAR graph : DepGraph; forSource : Source );
(* Allocates a new branch node of the given node type, stores the subnodes of
   the argument list in the node and passes back node, or NIL on failure. *)

PROCEDURE count ( graph : DepGraph ) : CARDINAL;
(* Returns the number of entries in graph. *)

PROCEDURE isDependent
  ( graph : DepGraph; module1, module2 : Lexeme ) : BOOLEAN;
(* Returns TRUE if module1 depends on module2, otherwise FALSE. *)

PROCEDURE isMutuallyDependent
  ( graph : DepGraph; module1, module2 : Lexeme ) : BOOLEAN;
(* Returns TRUE if module1 and module2 are mutually dependent, else FALSE. *)

PROCEDURE Iterate ( graph : DepGraph; p : IteratorBody );
(* Calls p for every module in graph, passing the module identifier to p. *)

PROCEDURE Release ( VAR graph : DepGraph );
(* Releases graph and passes back NIL if successful. *)


END DepGraph.