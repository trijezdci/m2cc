(*!m2r10*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE M2Lexer;

(* Lexer for Modula-2 R10 Bootstrap Compiler *)


IMPORT M2Symbol, Filename;


(* Lexer Type *)

TYPE M2Lexer = OPAQUE;


(* Lexer Status *)

TYPE Status =
  ( Success,
    AlreadyInitialised,
    UnableToAllocate,
    IllegalSymbolFound,
    UnescapedBackslash,
    IllegalCharInCharOrString,
    EndOfLineInCharOrString,
    LexemeCapacityExceded,
    CommentNestingLimitExceded,
    PrematureEndOfFile );


(* Constructor *)

PROCEDURE New ( VAR lexer : M2Lexer; filename : Filename; VAR s : Status );
(* Create newly allocated and initialised lexer instance associated with
   source file filename.  Passes back the status of the operation in s. *)


(* Destructor *)

PROCEDURE Release ( VAR lexer : M2Lexer );
 (* Release lexer instance. Passes back NIL in lexer if successful. *)


(* Static Methods *)

PROCEDURE GetSym ( self : M2Lexer; VAR current, next : M2Symbol );
(* Passes back the current lookahead symbol in current and consumes it.
   Passes back the new lookahead symbol in next without consuming it. *)

PROCEDURE consumeSym ( self : M2Lexer ) : M2Symbol;
(* Returns the current lookahead symbol and consumes it. *)

PROCEDURE lookaheadSym ( self : M2Lexer ) : M2Symbol;
(* Returns the current lookahead symbol without consuming it. *)

PROCEDURE warnCount ( self : M2Lexer ) : CARDINAL;
 (* Returns the lexer's accumulated warning count. *)

PROCEDURE errorCount ( self : M2Lexer ) : CARDINAL;
 (* Returns the lexer's accumulated error count. *)

PROCEDURE status ( self : M2Lexer ) : Status;
(* Returns the status of the last operation. *)

END M2Lexer.