(*!m2r10*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE M2Lexer;

(* Lexer for Modula-2 R10 Bootstrap Compiler *)


IMPORT M2Symbol;

IMPORT M2Filename;


(* Lexer Handle *)

TYPE Lexer = OPAQUE;


(* Return Status *)

TYPE Status =
  ( Success,
    AlreadyInitialised,
    UnableToAllocate,
    IllegalSymbolFound,
    UnescapedBackslash,
    IllegalCharInCharOrString,
    EndOfLineInCharOrString,
    LexemeCapacityExceded,
    CommentNestingLimitExceded,
    PrematureEndOfFile );


(* Operations *)

PROCEDURE New
  ( VAR lexer : Lexer; CONST filename : M2Filename; VAR s : Status );
(* Create newly allocated and initialised lexer instance associated with
   source file filename.  Passes back the status of the operation in s. *)

PROCEDURE GetSym ( lexer : Lexer; VAR current, next : Symbol );
(* Passes back the current lookahead symbol in current and consumes it.
   Passes back the new lookahead symbol in next without consuming it. *)

PROCEDURE ConsumeSym ( lexer : Lexer );
(* Consumes the current lookahead symbol. *)

PROCEDURE lookaheadSym ( lexer : Lexer ) : Symbol;
(* Returns the current lookahead symbol without consuming it. *)

PROCEDURE GetPosOfConsumedSym
  ( lexer : Lexer; VAR line, col : CARDINAL );
(* Passes back line and column counters of the last consumed symbol. *)

PROCEDURE GetPosOfLookaheadSym
  ( lexer : Lexer; VAR line, col : CARDINAL );
(* Passes back line and column counters of the current lookahead symbol. *)

PROCEDURE warnCount ( lexer : Lexer ) : CARDINAL;
 (* Returns the lexer's accumulated warning count. *)

PROCEDURE errorCount ( lexer : Lexer ) : CARDINAL;
 (* Returns the lexer's accumulated error count. *)

PROCEDURE GetStatus ( lexer : Lexer; VAR s : Status );
(* Passes the status of the last operation back in s. *)

PROCEDURE Release ( VAR lexer : Lexer );
 (* Release lexer instance. Passes back NIL in lexer if successful. *)


END M2Lexer.